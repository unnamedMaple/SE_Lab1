package entity;
//
//Generated by StarUML(tm) Java Add-In
//
//@ Project : Untitled
//@ File Name : 单项式.java
//@ Date : 2016/11/22
//@ Author : 
//
//
public class Expression {
    private String Polynomial;
    public String getExpression() 
    {
        return this.Polynomial;
    }
    
    public String simplify(String cmd) 
    {
    	String[] cmds = cmd.split(" ");//解析命令
		String simPoly = Polynomial+" ";
		String sign="";//存储符号位
		String mono="";//存储单项式
		String newPoly="";//存储新的表达式
		String newmono="";
		int i;
		int num_m = 0,num=simPoly.length();                                               
		for(i=0;i<num;i++)           
		{
			if(simPoly.substring(i, i+1).equals("+") || simPoly.substring(i, i+1).equals("-") || i == num-1)
			{
				Monomial mymono=new Monomial();
				mymono.mono=mono;
				newmono=mymono.simplify(cmds);
	            //对纯整数项的处理
		       if(newmono.matches("\\d+"))                                    
	           {
			       if(sign.equals("+")||(sign.equals("")))                    
	        	   {
			    	   num_m+=Integer.parseInt(newmono);                    
	        	   }
	        	   else
	        	   {
	    	 	       num_m-=Integer.parseInt(newmono);                 
	        	   }   
		       }
	           else                                                        
	           {
	               if(!newmono.substring(0,1).equals("0"))                                    
	        	   {
	        		newPoly+=sign+newmono;//y+4-4                
	        	   }
	           }
		           
	           //处理下个单项式前，数据初始化
               newmono = "";
	           mono = "";
	           sign=simPoly.substring(i, i+1);             
			}
		    else if(!simPoly.substring(i, i+1).equals(" "))//构建单项式      
			{
		    	mono+=simPoly.substring(i, i+1);                             
			}
		}

		//将整数项追加到新的表达式末尾
        if(num_m < 0)                                                      
		{
		    newPoly = newPoly+num_m;                                        
		}
        else if(num_m>0)                                                     
		{
		    newPoly =newPoly+"+"+ num_m;                                     
		}
		else
		{
			if(newPoly.isEmpty())                                            
			{
				newPoly = "0";                                                
			}
		}
		//打印最后的表达式
        if(newPoly.substring(0, 1).equals("+"))                             
		{
        	newPoly = newPoly.substring(1);                               
		}
	  return newPoly;
    }
    
    public String  derivative(String cmd) 
    {
		 String mono="";
		 String newmono="";
		 String simPoly = Polynomial+" ";
	     String newPoly="";
		 String[] cmds=cmd.split(" ");//命令解析
		 String sign ="";
		 
		 int len=simPoly.length(),i;
		 for(i=0;i<len;i++)
		 {
			 if(simPoly.substring(i, i+1).equals("+") || simPoly.substring(i, i+1).equals("-") || i == len-1) 
			 {
				 Monomial monomial=new Monomial();
				 monomial.mono=mono;
				 newmono=monomial.derivative(cmds);
				 if(!newmono.equals(""))
			     {
			    	newPoly += sign + newmono;
			     }
				//处理下个单项式前，数据初始化
			    sign = simPoly.substring(i, i+1);
		        mono = "";
		        newmono = "";
			 }
			 else if(!simPoly.substring(i, i+1).equals(" "))
			 {
				 
				 mono+=simPoly.substring(i, i+1);
			 }
		}
		if(newPoly.equals(""))
		{
	    	 return "0";
	    }
	    else
	    {
			 if(newPoly.substring(0, 1).equals("+"))
			 {
				 newPoly=newPoly.substring(1);
			 }
			 return newPoly;
		}

	 }

    
    public void setExpression(String expression) 
    {
    	this.Polynomial=expression;
    }
}
