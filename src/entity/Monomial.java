package entity;
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : 单项式.java
//  @ Date : 2016/11/22
//  @ Author : 
//
//

import java.util.regex.Matcher;
import java.util.regex.Pattern;

public class Monomial {
    public String mono;
    public String simplify(String[] cmds) 
    {
    	String newmono="";
    	String[] factor_array=mono.split("\\*");
    	boolean matched;
    	int len=factor_array.length;
        int factor=1;
        int var_num=cmds.length;
        int n ,value;
        String[] ve_and_value;
        for(int j=0;j<len;j++)//                                 
        {
	        if( factor_array[j].matches("\\d+") )      
        	{
	            	factor*= Integer.parseInt(factor_array[j]); 
        	}
        	else
        	{
	            matched = false;
		        for(int k = 1;k<var_num;k++)
        		{
        			ve_and_value = cmds[k].split("=");
		            if(factor_array[j].matches(ve_and_value[0])) 
        			{ 
        				factor *= Integer.parseInt(ve_and_value[1]);
	            			matched = true;                            
        			}
	                else if(factor_array[j].matches(ve_and_value[0]+"\\^\\d+")) 
        			{
        				n = Integer.parseInt(factor_array[j].split("\\^")[1]);
		            	value = Integer.parseInt(ve_and_value[1]);                
		            	for(int m=0;m<n;m++)                                     
        				{
		            		factor *= value;                                 
        				}
		            	matched = true;                                     
        			}
        		}
		        if(matched == false)                                      
        		{
	            	newmono += "*" + factor_array[j];                     
        		}
        		
			}
        }
        
        
        //对系数的处理
		if(factor!=1)                                                   
        {
		            newmono=factor+newmono;                                   
        }
		else 
        {
		    if( newmono.equals(""))                                    
        	{
		            	newmono="1";                                           
        	}
        	else
        	{
		            	newmono=newmono.substring(1);                          
        	}
        	
       }
        return newmono;
    }
    
    public String derivative(String[] cmds) 
    {
    	int factor=1;
    	int n=0;
        String newmono="";
        Pattern monoP= Pattern.compile("("+cmds[1]+"(\\^\\d+)*)|(.*\\*("+cmds[1]+"(\\^\\d+)*))|(.*\\*("+cmds[1]+"(\\^\\d+)*)\\*.*)|(("+cmds[1]+"(\\^\\d+)*)+\\*.*)");
	    Matcher monoM=monoP.matcher(mono);
    	if(monoM.matches())
	    {
	    	String[] factor_array = mono.split("\\*");
	    	int L = factor_array.length;
	    	for(int j = 0;j<L;j++)
	    	{
	    		if(factor_array[j].matches("\\d+"))
	    		{
	    			factor *= Integer.parseInt(factor_array[j]);
	    		}
	    		else if(factor_array[j].matches(cmds[1]+".*"))
	    		{
	    			
	    			if(factor_array[j].matches(cmds[1]))
	    			{
	    				n++;
	    			}
	    			else
	    			{	
	    				n+=Integer.parseInt(factor_array[j].split("\\^")[1]);
	    			}
	    			
	    		}
	    		else//不是待求导的未知变量的情况
	    		{
	    			newmono+="*"+factor_array[j];
	    		}
	    	}
	    	
	    	
	    	factor*=n;
	    	newmono=factor+newmono;
	    	
	    	if(newmono.matches("1\\*.*"))
	    	{
	    		newmono = newmono.substring(2);
	    	}
	    	
	    	if(n-1!=0)
	    	{
	    		if(n>2)
	    		{
	    			newmono=newmono+"*"+cmds[1]+"^"+(n-1);
	    		}
	    		else
	    		{
	    			newmono=newmono+"*"+cmds[1];
	    		}
	    	}
	    }
      return  newmono;
    }
}
